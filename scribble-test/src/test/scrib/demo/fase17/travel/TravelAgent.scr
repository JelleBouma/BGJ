//$ bin/scribblec.sh scribble-core/src/test/scrib/demo/fase17/travel/TravelAgent.scr -ip scribble-core/src/test/scrib/ -d scribble-core/src/test/scrib -api TravelAgent C -V
//$ javadoc -cp scribble-cli/target/classes/';'scribble-core/target/classes';'scribble-parser/target/classes';c:\Users\Raymond\.m2\repository\org\antlr\antlr-runtime\3.2\antlr-runtime-3.2.jar;'modules/validation/target/classes/';'modules/projection/target/classes/';C:\Users\Raymond\.m2\repository\org\codehaus\jackson\jackson-mapper-asl\1.9.9\jackson-mapper-asl-1.9.9.jar;C:\Users\Raymond\.m2\repository\org\codehaus\jackson\jackson-core-asl\1.9.9\jackson-core-asl-1.9.9.jar;'scribble-core/src/test/scrib -subpackages demo.fase17.travel.TravelAgent.TravelAgent -d test/doc/fase17/travel


module demo.fase17.travel.TravelAgent;

type <java> "java.lang.Integer" from "rt.jar" as Int;
type <java> "java.lang.String" from "rt.jar" as String;


explicit global protocol TravelAgent(role C, role A, role S)
{
	connect C to A;
	do Nego(C, A, S);
}

aux global protocol Nego(role C, role A, role S)
{
	choice at C
	{
		query(String) from C to A;
		quote(Int) from A to C;
		do Nego(C, A, S);
	}
	or
	{
		do Pay(C, A, S);
	}
}
		
// has to be aux (if default, then C/S duplicate connection; if explicit, C/A not connected)
aux global protocol Pay(role C, role A, role S)
{
	choice at C
	{
		connect C to S;
		payment(String) from C to S;
		confirm(Int) from S to C;
		accpt(Int) from C to A;
	}
	or
	{
		reject() from C to A;
	}
}
